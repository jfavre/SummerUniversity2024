cmake_minimum_required(VERSION 3.20)
project (diffusion2d CUDA C CXX)

include (GNUInstallDirs)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_BINDIR}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR}")

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CUDA_HOST_COMPILER g++-12)

include_directories(../include)
find_package(MPI REQUIRED CXX)
set(INSITU None CACHE STRING "Enable in-situ support")
set_property(CACHE INSITU PROPERTY STRINGS None Catalyst Ascent VTK-m)

if(INSITU STREQUAL "None")
  add_executable(diffusion2d diffusion2d.cu)
  target_link_libraries(diffusion2d PRIVATE cublas)
  add_executable(diffusion2d_mpi diffusion2d_mpi.cu)
  target_link_libraries(diffusion2d_mpi PRIVATE cublas MPI::MPI_CXX)
elseif(INSITU STREQUAL "Catalyst")
  add_executable(diffusion2d ${CUDA_SRCS} diffusion2d.cu)
  find_package(catalyst REQUIRED PATHS "${EBROOTCATALYST}/lib/cmake/catalyst-2.0")
  target_compile_definitions(diffusion2d PUBLIC USE_CATALYST=1)
  target_link_libraries(diffusion2d PRIVATE cublas catalyst::catalyst)

  add_executable(diffusion2d_mpi diffusion2d_mpi.cu)
  target_compile_definitions(diffusion2d_mpi PRIVATE USE_CATALYST=1)
  target_link_libraries(diffusion2d_mpi PRIVATE cublas  MPI::MPI_CXX catalyst::catalyst)
elseif(INSITU STREQUAL "Ascent")
  find_package(Ascent REQUIRED PATHS "/local/apps/Ascent-cuda/install/ascent-checkout/lib/cmake/ascent")
  add_executable(diffusion2d diffusion2d.cu)
  target_compile_definitions(diffusion2d PRIVATE USE_ASCENT=1)
  target_link_libraries(diffusion2d PRIVATE cublas ascent::ascent)
  set_target_properties(diffusion2d PROPERTIES CUDA_ARCHITECTURES "86")

  add_executable(diffusion2d_mpi diffusion2d_mpi.cu)
  target_compile_definitions(diffusion2d_mpi PRIVATE USE_ASCENT=1)
  target_link_libraries(diffusion2d_mpi PRIVATE cublas MPI::MPI_CXX ascent::ascent_mpi)
  set_target_properties(diffusion2d_mpi PROPERTIES CUDA_ARCHITECTURES "86")
elseif(INSITU STREQUAL "VTK-m")
  find_package(VTKm REQUIRED QUIET)
  add_executable(diffusion2d diffusion2d.cu)
  target_compile_definitions(diffusion2d PRIVATE USE_VTKM=1)
  target_link_libraries(diffusion2d PRIVATE cublas vtkm::io vtkm::rendering)
endif()
